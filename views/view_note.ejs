<%- include("partials/header"); -%>

    <nav class="navbar navbar-expand-lg navbar-light bg-transparent">
        <ul class="navbar-nav">
            <li class="nav-item">
                <button id="start-record-btn" class="btn btn-primary custom" title="Start Recording">Begin Recording</button>
            </li>

            <li class="nav-item">
                <input id="inputPath" type="file">
                <button id="addImage" class="btn btn-primary btn-file">
                    Add Illustration
                </button>
            </li>

            <li class="nav-item">
                <form class="" method="POST" action="/update/<%= id %>">
                    <input type="text" id="image_path" name="image_path" style="display: none;">
                    <textarea name="noteBody" id="noteBody" style="display: none;"></textarea>
                    <input id="submitNote" class="border-0 text-white btn bg-dark btn-file" type="submit" value="Save">
                </form>
            </li>

            <li class="nav-item">
                <label class="btn">
                    <span style="font-style: italic; font-weight: 300; margin-left: 10px;">Last Updated on August</span>
                </label>
            </li>
        </ul>
    </nav>

    <!-- Text Editor -->
    <div class="text-editor">
        <div id="editor">
            <%- body %>
        </div>

        <div class="card-grid">
            <div id="imageDisplay" class="card">
            </div>
        </div>

    </div>

    <!-- Initialize Quill Text Editor -->
    <script>
        const toolbarOptions = [

            [{
                'font': []
            }],

            [{
                'size': ['small', false, 'large', 'huge']
            }], // custom dropdown

            ['bold', 'italic', 'underline', 'strike'], // toggled buttons

            [{
                'color': []
            }, {
                'background': []
            }], // dropdown with defaults from theme

            [{
                'script': 'sub'
            }, {
                'script': 'super'
            }], // superscript/subscript

            [{
                'header': 1
            }, {
                'header': 2
            }], // custom button values

            ['blockquote', 'code-block'],

            [{
                'list': 'ordered'
            }, {
                'list': 'bullet'
            }],
            [{
                'indent': '-1'
            }, {
                'indent': '+1'
            }], // outdent/indent
            [{
                'direction': 'rtl'
            }], // text direction

            [{
                'align': []
            }],

            ['clean'] // remove formatting button
        ];

        const editor = new Quill('#editor', {
            modules: {
                toolbar: toolbarOptions
            },
            placeholder: 'Start brainstorming....',
            theme: 'snow'
        });

        // Tracking Changes
        // editor.on('text-change', async function(delta, oldDelta, source) {
        //    let text = editor.getText();
        //    updateText(1, text);
        //});

        // Note Submission
        document.getElementById("submitNote").addEventListener('click', function() {
            const text = editor.root.innerHTML;
            let body = document.getElementById('noteBody');
            body.value = text;
            console.log(body.value);
        });

        document.getElementById("addImage").addEventListener('click', function() {
            const path = document.getElementById("inputPath").value;
            let image_paths = document.getElementById("image_path");
            if (image_paths.value == "") image_paths.value = path;
            else image_paths.value = image_paths.value + "," + path;
            document.getElementById('imageDisplay').innerHTML += "<img class=\"card-img-top\" src=\"" + path + "\"/>"; 
        });

        // Recording Audio
        if (!('webkitSpeechRecognition' in window)) {
            upgrade();
        }

        var recognizing;
        var recognition = new webkitSpeechRecognition();
        recognition.continuous = true;
        reset();
        recognition.onend = reset;

        recognition.onresult = function(event) {
            for (var i = event.resultIndex; i < event.results.length; ++i) {
                if (event.results[i].isFinal) {
                    let caretPosition = editor.scroll.length() + 1;
                    editor.insertText(caretPosition, event.results[i][0].transcript);
                }
            }
        }

        function reset() {
            recognizing = false;
            document.getElementById("start-record-btn").innerHTML = "Begin Recording";
        }

        document.getElementById("start-record-btn").addEventListener('click', function() {
            if (recognizing) {
                recognition.stop();
                reset();
            } else {
                recognition.start();
                recognizing = true;
                document.getElementById("start-record-btn").innerHTML = "Stop Recording";
            }
        });
    </script>

    <%- include("partials/footer"); -%>